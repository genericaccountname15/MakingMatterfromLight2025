"""
plot_optimise_data.py

Plots the variation of an independent variable
against the maximum positron yield with data taken
from a csv generated by optimise_delay's write_data_csv()
function

Timothy Chew
1/8/25
"""
import numpy as np
import matplotlib.pyplot as plt

def plot_optimised_data(filename: str, variable_name: str, xlabel: str, **kwargs):
    """Plots the optimise data with option to save the figure generated

    Args:
        filename (str): filename of data csv
        variable_name (str): name of variable being varied
        xlabel (str): what to label the x-axis
        **kwargs: optional
            old_value (float, optional): value of the variable used in 2018. Defaults to None
            ylims (tuple[float, float], optional): ylims of the plot. Defaults to None.
            save_fig (bool, optional): If True, saves the figure as a png. Defaults to False.
            fig_location (str, optional): Specified file location of the figure. Defaults to None.
    """
    # kwargs ############################################################
    old_value = kwargs.get('old_value', None)
    ylims = kwargs.get('ylims', None)
    save_fig = kwargs.get('save_fig', False)
    fig_location = kwargs.get('fig_location', None)


    data = np.loadtxt(filename, delimiter=',', skiprows=1)

    d = data[:,0]
    npos = data[:,1] * 2
    npos_err = data[:,2] * 2
    #due to coding error

    _, ax = plt.subplots()
    ax.set_title(f'Positron count vs {variable_name}')
    ax.set_xlabel(xlabel)
    ax.set_ylabel('Maximum number of positrons/pC incident on CsI')

    ax.plot(
        d, npos,
        '-o',
        label = 'Positron yield',
        color = 'blue'
    )

    ax.fill_between(
        x = d,
        y1 = npos - npos_err,
        y2 = npos + npos_err,
        label = 'Uncertainty',
        color = 'blue',
        alpha = 0.3
    )

    if old_value is not None:
        ax.axvline(x = old_value,
            ymin = 0, ymax = 1,
            label = f'{variable_name} used in 2018', color = 'orange')

    ax.set_axisbelow(True)
    ax.grid()
    ax.legend()

    if ylims is not None:
        ax.set_ylim(ylims)

    if save_fig:
        if fig_location is None:
            plt.savefig(f'{variable_name}_optimisation_fig.png')
        else:
            plt.savefig(f'{fig_location}/{variable_name}_optimisation_fig.png')

    plt.show()
